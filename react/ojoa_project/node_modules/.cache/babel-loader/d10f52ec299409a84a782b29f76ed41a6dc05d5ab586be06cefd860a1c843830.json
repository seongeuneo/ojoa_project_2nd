{"ast":null,"code":"var _jsxFileName = \"D:\\\\MTest\\\\ojoaproject\\\\react\\\\ojoa_project\\\\src\\\\pages\\\\Login\\\\NaverLogin.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NaverLogin = ({\n  setGetToken,\n  setUserInfo\n}) => {\n  _s();\n  const {\n    naver\n  } = window;\n  const NAVER_CLIENT_ID = 'iLvDmQxDfS5FjHCKQmDY'; // 발급 받은 Client ID 입력 \n  const NAVER_CALLBACK_URL = 'https://ojoa-project-2-v1.web.app/'; // 작성했던 Callback URL 입력\n\n  const initializeNaverLogin = () => {\n    const naverLogin = new naver.LoginWithNaverId({\n      clientId: NAVER_CLIENT_ID,\n      callbackUrl: NAVER_CALLBACK_URL,\n      // 팝업창으로 로그인을 진행할 것인지?           \n      isPopup: false,\n      // 버튼 타입 ( 색상, 타입, 크기 변경 가능 )\n      loginButton: {\n        color: 'green',\n        type: 3,\n        height: 58\n      },\n      callbackHandle: true\n    });\n    naverLogin.init();\n\n    // 선언된 naverLogin 을 이용하여 유저 (사용자) 정보를 불러오는데  \n    // 함수 내부에서 naverLogin을 선언하였기에 지역변수처리가 되어  \n    // userinfo 정보를 추출하는 것은 지역변수와 같은 함수에서 진행주어야한다.\n\n    // 아래와 같이 로그인한 유저 ( 사용자 ) 정보를 직접 접근하여 추출가능하다.\n    // 이때, 데이터는 첫 연동시 정보 동의한 데이터만 추출 가능하다.\n\n    // 백엔드 개발자가 정보를 전달해준다면 아래 요기! 라고 작성된 부분까지는 \n    // 코드 생략이 가능하다.  \n\n    // naverLogin.getLoginStatus(async function (status) {\n    //     if (status) {\n    //         // 아래처럼 선택하여 추출이 가능하고, \n    //         const userid = naverLogin.user.getEmail()\n    //         const username = naverLogin.user.getName()\n    //         // 정보 전체를 아래처럼 state 에 저장하여 추출하여 사용가능하다. \n    //         // setUserInfo(naverLogin.user)\n    //     }\n    // })\n    // 요기!\n  };\n\n  const userAccessToken = () => {\n    window.location.href.includes('access_token') && getToken();\n  };\n  const getToken = () => {\n    const token = window.location.href.split('=')[1].split('&')[0];\n    // console.log, alert 창을 통해 어스코드가 잘 추출 되는지 확인하자! \n\n    // 이후 로컬 스토리지 또는 state에 저장하여 사용하자!   \n    // localStorage.setItem('access_token', token)\n    // setGetToken(token)\n  };\n\n  // 화면 첫 렌더링이후 바로 실행하기 위해 useEffect 를 사용하였다.\n  useEffect(() => {\n    initializeNaverLogin();\n    userAccessToken();\n  }, []);\n\n  // 클릭버튼 handle\n  // const handleNaverClick = () => {\n  //     const naverLoginButton = document.getElementById(\n  //         \"naverIdLogin_loginButton\"\n  //     );\n  //     if (naverLoginButton) naverLoginButton.click();\n  // };\n\n  return (\n    /*#__PURE__*/\n    // <React>\n    //     <div onClick={handleNaverClick}><img src=\"../images/btn_naver_login.gif\" alt='네이버로그인' />네이버로 로그인하기</div>\n    // </React>\n    _jsxDEV(\"div\", {\n      id: \"naverIdLogin\",\n      style: {\n        display: \"none\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)\n  );\n};\n_s(NaverLogin, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = NaverLogin;\nexport default NaverLogin;\nvar _c;\n$RefreshReg$(_c, \"NaverLogin\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","NaverLogin","setGetToken","setUserInfo","_s","naver","window","NAVER_CLIENT_ID","NAVER_CALLBACK_URL","initializeNaverLogin","naverLogin","LoginWithNaverId","clientId","callbackUrl","isPopup","loginButton","color","type","height","callbackHandle","init","userAccessToken","location","href","includes","getToken","token","split","id","style","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/MTest/ojoaproject/react/ojoa_project/src/pages/Login/NaverLogin.jsx"],"sourcesContent":["import React, { useEffect } from 'react'\r\n\r\nconst NaverLogin = ({ setGetToken, setUserInfo }) => {\r\n\r\n\r\n    const { naver } = window\r\n    const NAVER_CLIENT_ID = 'iLvDmQxDfS5FjHCKQmDY' // 발급 받은 Client ID 입력 \r\n    const NAVER_CALLBACK_URL = 'https://ojoa-project-2-v1.web.app/' // 작성했던 Callback URL 입력\r\n\r\n    const initializeNaverLogin = () => {\r\n        const naverLogin = new naver.LoginWithNaverId({\r\n            clientId: NAVER_CLIENT_ID,\r\n            callbackUrl: NAVER_CALLBACK_URL,\r\n            // 팝업창으로 로그인을 진행할 것인지?           \r\n            isPopup: false,\r\n            // 버튼 타입 ( 색상, 타입, 크기 변경 가능 )\r\n            loginButton: { color: 'green', type: 3, height: 58 },\r\n            callbackHandle: true,\r\n        })\r\n        naverLogin.init()\r\n\r\n        // 선언된 naverLogin 을 이용하여 유저 (사용자) 정보를 불러오는데  \r\n        // 함수 내부에서 naverLogin을 선언하였기에 지역변수처리가 되어  \r\n        // userinfo 정보를 추출하는 것은 지역변수와 같은 함수에서 진행주어야한다.\r\n\r\n        // 아래와 같이 로그인한 유저 ( 사용자 ) 정보를 직접 접근하여 추출가능하다.\r\n        // 이때, 데이터는 첫 연동시 정보 동의한 데이터만 추출 가능하다.\r\n\r\n        // 백엔드 개발자가 정보를 전달해준다면 아래 요기! 라고 작성된 부분까지는 \r\n        // 코드 생략이 가능하다.  \r\n\r\n        // naverLogin.getLoginStatus(async function (status) {\r\n        //     if (status) {\r\n        //         // 아래처럼 선택하여 추출이 가능하고, \r\n        //         const userid = naverLogin.user.getEmail()\r\n        //         const username = naverLogin.user.getName()\r\n        //         // 정보 전체를 아래처럼 state 에 저장하여 추출하여 사용가능하다. \r\n        //         // setUserInfo(naverLogin.user)\r\n        //     }\r\n        // })\r\n        // 요기!\r\n    }\r\n\r\n    const userAccessToken = () => {\r\n        window.location.href.includes('access_token') && getToken()\r\n    }\r\n\r\n    const getToken = () => {\r\n        const token = window.location.href.split('=')[1].split('&')[0]\r\n        // console.log, alert 창을 통해 어스코드가 잘 추출 되는지 확인하자! \r\n\r\n        // 이후 로컬 스토리지 또는 state에 저장하여 사용하자!   \r\n        // localStorage.setItem('access_token', token)\r\n        // setGetToken(token)\r\n    }\r\n\r\n\r\n    // 화면 첫 렌더링이후 바로 실행하기 위해 useEffect 를 사용하였다.\r\n    useEffect(() => {\r\n        initializeNaverLogin()\r\n        userAccessToken()\r\n    }, [])\r\n\r\n    // 클릭버튼 handle\r\n    // const handleNaverClick = () => {\r\n    //     const naverLoginButton = document.getElementById(\r\n    //         \"naverIdLogin_loginButton\"\r\n    //     );\r\n    //     if (naverLoginButton) naverLoginButton.click();\r\n    // };\r\n\r\n    return (\r\n        // <React>\r\n        //     <div onClick={handleNaverClick}><img src=\"../images/btn_naver_login.gif\" alt='네이버로그인' />네이버로 로그인하기</div>\r\n        // </React>\r\n        <div id=\"naverIdLogin\" style={{ display: \"none\" }} />\r\n    );\r\n}\r\nexport default NaverLogin;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,UAAU,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAGjD,MAAM;IAAEC;EAAM,CAAC,GAAGC,MAAM;EACxB,MAAMC,eAAe,GAAG,sBAAsB,EAAC;EAC/C,MAAMC,kBAAkB,GAAG,oCAAoC,EAAC;;EAEhE,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;IAC/B,MAAMC,UAAU,GAAG,IAAIL,KAAK,CAACM,gBAAgB,CAAC;MAC1CC,QAAQ,EAAEL,eAAe;MACzBM,WAAW,EAAEL,kBAAkB;MAC/B;MACAM,OAAO,EAAE,KAAK;MACd;MACAC,WAAW,EAAE;QAAEC,KAAK,EAAE,OAAO;QAAEC,IAAI,EAAE,CAAC;QAAEC,MAAM,EAAE;MAAG,CAAC;MACpDC,cAAc,EAAE;IACpB,CAAC,CAAC;IACFT,UAAU,CAACU,IAAI,CAAC,CAAC;;IAEjB;IACA;IACA;;IAEA;IACA;;IAEA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ,CAAC;;EAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC1Bf,MAAM,CAACgB,QAAQ,CAACC,IAAI,CAACC,QAAQ,CAAC,cAAc,CAAC,IAAIC,QAAQ,CAAC,CAAC;EAC/D,CAAC;EAED,MAAMA,QAAQ,GAAGA,CAAA,KAAM;IACnB,MAAMC,KAAK,GAAGpB,MAAM,CAACgB,QAAQ,CAACC,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC9D;;IAEA;IACA;IACA;EACJ,CAAC;;EAGD;EACA7B,SAAS,CAAC,MAAM;IACZW,oBAAoB,CAAC,CAAC;IACtBY,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;IAAA;IACI;IACA;IACA;IACArB,OAAA;MAAK4B,EAAE,EAAC,cAAc;MAACC,KAAK,EAAE;QAAEC,OAAO,EAAE;MAAO;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;AAE7D,CAAC;AAAA9B,EAAA,CA3EKH,UAAU;AAAAkC,EAAA,GAAVlC,UAAU;AA4EhB,eAAeA,UAAU;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}