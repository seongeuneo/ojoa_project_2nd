{"ast":null,"code":"var _jsxFileName = \"D:\\\\MTest\\\\ojoaproject\\\\react\\\\ojoa_project\\\\src\\\\pages\\\\Login\\\\LoginNaver.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NaverLogin = ({\n  setGetToken,\n  setUserInfo\n}) => {\n  _s();\n  const {\n    naver\n  } = window;\n  const NAVER_CLIENT_ID = iLvDmQxDfS5FjHCKQmDY; // 발급 받은 Client ID 입력 \n  const NAVER_CALLBACK_URL = 'https://ojoa-project-2-v1.web.app/'; // 작성했던 Callback URL 입력\n\n  const initializeNaverLogin = () => {\n    const naverLogin = new naver.LoginWithNaverId({\n      clientId: NAVER_CLIENT_ID,\n      callbackUrl: NAVER_CALLBACK_URL,\n      // 팝업창으로 로그인을 진행할 것인지?           \n      isPopup: false,\n      // 버튼 타입 ( 색상, 타입, 크기 변경 가능 )\n      loginButton: {\n        color: 'green',\n        type: 3,\n        height: 58\n      },\n      callbackHandle: true\n    });\n    naverLogin.init();\n\n    // 선언된 naverLogin 을 이용하여 유저 (사용자) 정보를 불러오는데  \n    // 함수 내부에서 naverLogin을 선언하였기에 지역변수처리가 되어  \n    // userinfo 정보를 추출하는 것은 지역변수와 같은 함수에서 진행주어야한다.\n\n    // 아래와 같이 로그인한 유저 ( 사용자 ) 정보를 직접 접근하여 추출가능하다.\n    // 이때, 데이터는 첫 연동시 정보 동의한 데이터만 추출 가능하다.\n\n    // 백엔드 개발자가 정보를 전달해준다면 아래 요기! 라고 작성된 부분까지는 \n    // 코드 생략이 가능하다.  \n\n    naverLogin.getLoginStatus(async function (status) {\n      if (status) {\n        // 아래처럼 선택하여 추출이 가능하고, \n        const userid = naverLogin.user.getEmail();\n        const username = naverLogin.user.getName();\n        // 정보 전체를 아래처럼 state 에 저장하여 추출하여 사용가능하다. \n        // setUserInfo(naverLogin.user)\n      }\n    });\n    // 요기!\n  };\n\n  // 네이버 소셜 로그인 (네아로) 는 URL 에 엑세스 어스코드가 붙어서 전달된다.\n  // 우선 아래와 같이 어스코드를 추출 할 수 있으며,\n  // 3부에 작성 될 Redirect 페이지를 통해 빠르고, 깨끗하게 처리가 가능하다.\n\n  const userAccessToken = () => {\n    window.location.href.includes('access_token') && getToken();\n  };\n  const getToken = () => {\n    const token = window.location.href.split('=')[1].split('&')[0];\n    // console.log, alert 창을 통해 어스코드가 잘 추출 되는지 확인하자! \n\n    // 이후 로컬 스토리지 또는 state에 저장하여 사용하자!   \n    // localStorage.setItem('access_token', token)\n    // setGetToken(token)\n  };\n\n  // 화면 첫 렌더링이후 바로 실행하기 위해 useEffect 를 사용하였다.\n  useEffect(() => {\n    initializeNaverLogin();\n    userAccessToken();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: handleNaverClick,\n      children: \"\\uB124\\uC774\\uBC84\\uB85C \\uB85C\\uADF8\\uC778\\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"naverIdLogin\",\n      style: {\n        display: \"none\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(NaverLogin, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = NaverLogin;\nvar _c;\n$RefreshReg$(_c, \"NaverLogin\");","map":{"version":3,"names":["useEffect","jsxDEV","_jsxDEV","NaverLogin","setGetToken","setUserInfo","_s","naver","window","NAVER_CLIENT_ID","iLvDmQxDfS5FjHCKQmDY","NAVER_CALLBACK_URL","initializeNaverLogin","naverLogin","LoginWithNaverId","clientId","callbackUrl","isPopup","loginButton","color","type","height","callbackHandle","init","getLoginStatus","status","userid","user","getEmail","username","getName","userAccessToken","location","href","includes","getToken","token","split","React","Fragment","children","onClick","handleNaverClick","fileName","_jsxFileName","lineNumber","columnNumber","id","style","display","_c","$RefreshReg$"],"sources":["D:/MTest/ojoaproject/react/ojoa_project/src/pages/Login/LoginNaver.jsx"],"sourcesContent":["import { useEffect } from 'react'\r\n\r\nconst NaverLogin = ({ setGetToken, setUserInfo }) => {\r\n\r\n\r\n    const { naver } = window\r\n    const NAVER_CLIENT_ID = iLvDmQxDfS5FjHCKQmDY // 발급 받은 Client ID 입력 \r\n    const NAVER_CALLBACK_URL = 'https://ojoa-project-2-v1.web.app/' // 작성했던 Callback URL 입력\r\n\r\n    const initializeNaverLogin = () => {\r\n        const naverLogin = new naver.LoginWithNaverId({\r\n            clientId: NAVER_CLIENT_ID,\r\n            callbackUrl: NAVER_CALLBACK_URL,\r\n            // 팝업창으로 로그인을 진행할 것인지?           \r\n            isPopup: false,\r\n            // 버튼 타입 ( 색상, 타입, 크기 변경 가능 )\r\n            loginButton: { color: 'green', type: 3, height: 58 },\r\n            callbackHandle: true,\r\n        })\r\n        naverLogin.init()\r\n\r\n        // 선언된 naverLogin 을 이용하여 유저 (사용자) 정보를 불러오는데  \r\n        // 함수 내부에서 naverLogin을 선언하였기에 지역변수처리가 되어  \r\n        // userinfo 정보를 추출하는 것은 지역변수와 같은 함수에서 진행주어야한다.\r\n\r\n        // 아래와 같이 로그인한 유저 ( 사용자 ) 정보를 직접 접근하여 추출가능하다.\r\n        // 이때, 데이터는 첫 연동시 정보 동의한 데이터만 추출 가능하다.\r\n\r\n        // 백엔드 개발자가 정보를 전달해준다면 아래 요기! 라고 작성된 부분까지는 \r\n        // 코드 생략이 가능하다.  \r\n\r\n        naverLogin.getLoginStatus(async function (status) {\r\n            if (status) {\r\n                // 아래처럼 선택하여 추출이 가능하고, \r\n                const userid = naverLogin.user.getEmail()\r\n                const username = naverLogin.user.getName()\r\n                // 정보 전체를 아래처럼 state 에 저장하여 추출하여 사용가능하다. \r\n                // setUserInfo(naverLogin.user)\r\n            }\r\n        })\r\n        // 요기!\r\n    }\r\n\r\n\r\n\r\n    // 네이버 소셜 로그인 (네아로) 는 URL 에 엑세스 어스코드가 붙어서 전달된다.\r\n    // 우선 아래와 같이 어스코드를 추출 할 수 있으며,\r\n    // 3부에 작성 될 Redirect 페이지를 통해 빠르고, 깨끗하게 처리가 가능하다.\r\n\r\n    const userAccessToken = () => {\r\n        window.location.href.includes('access_token') && getToken()\r\n    }\r\n\r\n    const getToken = () => {\r\n        const token = window.location.href.split('=')[1].split('&')[0]\r\n        // console.log, alert 창을 통해 어스코드가 잘 추출 되는지 확인하자! \r\n\r\n        // 이후 로컬 스토리지 또는 state에 저장하여 사용하자!   \r\n        // localStorage.setItem('access_token', token)\r\n        // setGetToken(token)\r\n    }\r\n\r\n\r\n    // 화면 첫 렌더링이후 바로 실행하기 위해 useEffect 를 사용하였다.\r\n    useEffect(() => {\r\n        initializeNaverLogin()\r\n        userAccessToken()\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div onClick={handleNaverClick}>네이버로 로그인하기</div>\r\n            <div id=\"naverIdLogin\" style={{ display: \"none\" }} />\r\n        </React.Fragment>\r\n    )\r\n}"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,UAAU,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAGjD,MAAM;IAAEC;EAAM,CAAC,GAAGC,MAAM;EACxB,MAAMC,eAAe,GAAGC,oBAAoB,EAAC;EAC7C,MAAMC,kBAAkB,GAAG,oCAAoC,EAAC;;EAEhE,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;IAC/B,MAAMC,UAAU,GAAG,IAAIN,KAAK,CAACO,gBAAgB,CAAC;MAC1CC,QAAQ,EAAEN,eAAe;MACzBO,WAAW,EAAEL,kBAAkB;MAC/B;MACAM,OAAO,EAAE,KAAK;MACd;MACAC,WAAW,EAAE;QAAEC,KAAK,EAAE,OAAO;QAAEC,IAAI,EAAE,CAAC;QAAEC,MAAM,EAAE;MAAG,CAAC;MACpDC,cAAc,EAAE;IACpB,CAAC,CAAC;IACFT,UAAU,CAACU,IAAI,CAAC,CAAC;;IAEjB;IACA;IACA;;IAEA;IACA;;IAEA;IACA;;IAEAV,UAAU,CAACW,cAAc,CAAC,gBAAgBC,MAAM,EAAE;MAC9C,IAAIA,MAAM,EAAE;QACR;QACA,MAAMC,MAAM,GAAGb,UAAU,CAACc,IAAI,CAACC,QAAQ,CAAC,CAAC;QACzC,MAAMC,QAAQ,GAAGhB,UAAU,CAACc,IAAI,CAACG,OAAO,CAAC,CAAC;QAC1C;QACA;MACJ;IACJ,CAAC,CAAC;IACF;EACJ,CAAC;;EAID;EACA;EACA;;EAEA,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC1BvB,MAAM,CAACwB,QAAQ,CAACC,IAAI,CAACC,QAAQ,CAAC,cAAc,CAAC,IAAIC,QAAQ,CAAC,CAAC;EAC/D,CAAC;EAED,MAAMA,QAAQ,GAAGA,CAAA,KAAM;IACnB,MAAMC,KAAK,GAAG5B,MAAM,CAACwB,QAAQ,CAACC,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC9D;;IAEA;IACA;IACA;EACJ,CAAC;;EAGD;EACArC,SAAS,CAAC,MAAM;IACZY,oBAAoB,CAAC,CAAC;IACtBmB,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAGN,oBACI7B,OAAA,CAACoC,KAAK,CAACC,QAAQ;IAAAC,QAAA,gBACXtC,OAAA;MAAKuC,OAAO,EAAEC,gBAAiB;MAAAF,QAAA,EAAC;IAAU;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChD5C,OAAA;MAAK6C,EAAE,EAAC,cAAc;MAACC,KAAK,EAAE;QAAEC,OAAO,EAAE;MAAO;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEzB,CAAC;AAAAxC,EAAA,CA1EKH,UAAU;AAAA+C,EAAA,GAAV/C,UAAU;AAAA,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}